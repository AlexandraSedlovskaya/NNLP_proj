{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["ZlNkh3M3JB-D"],"authorship_tag":"ABX9TyPzN/u/1bgeZPKqdFwLXqkI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ccaa0176d6df4852b910f854da5f8d52":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bfad44baf80e469598f1a5bcaec9d7d6","IPY_MODEL_b8c84490703648ea9f904aa051c0a03b","IPY_MODEL_fe32000dc9ca4a84807166cb7e968c8a"],"layout":"IPY_MODEL_d6d27f0478e4402a9b3ac68288a7710d"}},"bfad44baf80e469598f1a5bcaec9d7d6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_826c2ec9122e458f92f67861410c6347","placeholder":"​","style":"IPY_MODEL_01a4382ea8784e6ca4592684cc9732d7","value":"100%"}},"b8c84490703648ea9f904aa051c0a03b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2821729d06c5446f88088d97ec01a009","max":129066,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a7742b0c343343a28043507893dac9b7","value":129066}},"fe32000dc9ca4a84807166cb7e968c8a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e0077574cdaf440d8bafc0a55ef9d5b3","placeholder":"​","style":"IPY_MODEL_d532da0b74d0440f8fef977c847e8298","value":" 129066/129066 [00:00&lt;00:00, 327227.73it/s]"}},"d6d27f0478e4402a9b3ac68288a7710d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"826c2ec9122e458f92f67861410c6347":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"01a4382ea8784e6ca4592684cc9732d7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2821729d06c5446f88088d97ec01a009":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a7742b0c343343a28043507893dac9b7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e0077574cdaf440d8bafc0a55ef9d5b3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d532da0b74d0440f8fef977c847e8298":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fda1f61ab564475ba4b2fcdcf2591a7f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_020cdaf1cb404a448318494ee6289503","IPY_MODEL_7f6c69efc39646aaa4e067ce651f0c92","IPY_MODEL_d68d3520cfe84ed884fb81b6a3872a2f"],"layout":"IPY_MODEL_939835e4bfc54510914729f611827392"}},"020cdaf1cb404a448318494ee6289503":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b522fbbf477145cba23eba46cb22be62","placeholder":"​","style":"IPY_MODEL_cfbb48f428fa48308e813d7781454a3e","value":"100%"}},"7f6c69efc39646aaa4e067ce651f0c92":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0345b263e08f47beb2e10835ad392a32","max":356383,"min":0,"orientation":"horizontal","style":"IPY_MODEL_08a405ed7f4849db9bef104ad0b0db65","value":356383}},"d68d3520cfe84ed884fb81b6a3872a2f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c6ce74b0a5b64cc2bee0cc9e04c78915","placeholder":"​","style":"IPY_MODEL_48b4e5bcff2340b588fdc2138a6ff0e5","value":" 356383/356383 [00:02&lt;00:00, 172872.33it/s]"}},"939835e4bfc54510914729f611827392":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b522fbbf477145cba23eba46cb22be62":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfbb48f428fa48308e813d7781454a3e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0345b263e08f47beb2e10835ad392a32":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"08a405ed7f4849db9bef104ad0b0db65":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c6ce74b0a5b64cc2bee0cc9e04c78915":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"48b4e5bcff2340b588fdc2138a6ff0e5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["#Imports"],"metadata":{"id":"ZlNkh3M3JB-D"}},{"cell_type":"code","source":["import tensorflow as tf\n","import pandas as pd\n","from keras.models import Sequential\n","from keras.layers import Embedding, SpatialDropout1D, GRU, Bidirectional, LSTM\n","from keras.layers.core import Dense\n","from keras.preprocessing import sequence, text\n","import numpy as np\n","from tqdm import tqdm_notebook as tqdm\n","from sklearn.model_selection import train_test_split\n","from keras.utils import pad_sequences\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"iTnYtjZmCE3G","executionInfo":{"status":"ok","timestamp":1681370071203,"user_tz":-180,"elapsed":1422,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["!pip install navec\n","!wget https://storage.yandexcloud.net/natasha-navec/packs/navec_hudlit_v1_12B_500K_300d_100q.tar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"60jYh6zUeIU6","executionInfo":{"status":"ok","timestamp":1681370080421,"user_tz":-180,"elapsed":8101,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"0fc29302-7c0b-4332-af90-87c140d45f9b"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: navec in /usr/local/lib/python3.9/dist-packages (0.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from navec) (1.22.4)\n","--2023-04-13 07:14:35--  https://storage.yandexcloud.net/natasha-navec/packs/navec_hudlit_v1_12B_500K_300d_100q.tar\n","Resolving storage.yandexcloud.net (storage.yandexcloud.net)... 213.180.193.243, 2a02:6b8::1d9\n","Connecting to storage.yandexcloud.net (storage.yandexcloud.net)|213.180.193.243|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 53012480 (51M) [application/x-tar]\n","Saving to: ‘navec_hudlit_v1_12B_500K_300d_100q.tar.2’\n","\n","navec_hudlit_v1_12B 100%[===================>]  50.56M  17.4MB/s    in 2.9s    \n","\n","2023-04-13 07:14:39 (17.4 MB/s) - ‘navec_hudlit_v1_12B_500K_300d_100q.tar.2’ saved [53012480/53012480]\n","\n"]}]},{"cell_type":"markdown","source":["#Get datsets"],"metadata":{"id":"-ggQAoyieB6d"}},{"cell_type":"code","source":["! pip install kaggle\n","! mkdir ~/.kaggle\n","! cp kaggle.json ~/.kaggle/\n","! chmod 600 ~/.kaggle/kaggle.json\n","\n","y\n","!kaggle competitions download -c ruatd-2022-bi\n","\n","!mkdir ruatd-2022-bi\n","\n","!unzip /content/ruatd-2022-bi.zip -d ruatd-2022-bi\n","\n","!rm /content/ruatd-2022-bi.zip"],"metadata":{"id":"ImX8MDnySjVj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv('/content/ruatd-2022-bi/train.csv')\n","test = pd.read_csv('/content/ruatd-2022-bi/val.csv')"],"metadata":{"id":"FQnnjD9lJV6_","executionInfo":{"status":"ok","timestamp":1681370488407,"user_tz":-180,"elapsed":1719,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["data[\"Class\"].loc[data[\"Class\"]==\"H\"]=1\n","data[\"Class\"].loc[data[\"Class\"]==\"M\"]=0\n","\n","test[\"Class\"].loc[test[\"Class\"]==\"H\"]=1\n","test[\"Class\"].loc[test[\"Class\"]==\"M\"]=0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oKRdTjBaTmSL","executionInfo":{"status":"ok","timestamp":1681370488409,"user_tz":-180,"elapsed":7,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"369b7f46-74e8-4d42-f228-7acf35a0ebcb"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-05c1b842a144>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data[\"Class\"].loc[data[\"Class\"]==\"H\"]=1\n","<ipython-input-25-05c1b842a144>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data[\"Class\"].loc[data[\"Class\"]==\"M\"]=0\n","<ipython-input-25-05c1b842a144>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test[\"Class\"].loc[test[\"Class\"]==\"H\"]=1\n","<ipython-input-25-05c1b842a144>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test[\"Class\"].loc[test[\"Class\"]==\"M\"]=0\n"]}]},{"cell_type":"code","source":["tf.config.run_functions_eagerly(True)\n"],"metadata":{"id":"JN_9Co8h0-Pv","executionInfo":{"status":"ok","timestamp":1681370488409,"user_tz":-180,"elapsed":6,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["x_train = data['Text']\n","y_train = data['Class']\n","x_test = test['Text']\n","y_test = test['Class']\n","\n","y_train = np.asarray(y_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')"],"metadata":{"id":"pqcohiODMN4f","executionInfo":{"status":"ok","timestamp":1681370488410,"user_tz":-180,"elapsed":6,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["#Analytics"],"metadata":{"id":"GmVTqslFWx8s"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","classes = data.value_counts('Class')\n","print(classes)\n","plt.barh(['H', 'M'], classes.values)\n","  \n","plt.xlabel('Texts')\n","plt.ylabel('Class')\n","plt.title('Class distribution')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":541},"id":"TUYQ0ZZsW4FE","executionInfo":{"status":"ok","timestamp":1681352155079,"user_tz":-180,"elapsed":1281,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"cedc2ba8-2869-4d6b-832f-08c7677c35e4"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Class\n","1    64535\n","0    64531\n","dtype: int64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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//xzsWvStGlTFRQU6NChQx7bL45ASYqIiJAknT59+prNE/A1RAvgI1wul2JiYpSWllbmY7zyyisaPny4unXrpvfff1+LFi3S4sWL1bx5c4/rOpo2baqdO3dq1qxZio+P1yeffKL4+HglJye7x9x3331KT0/X5MmTFRMTo9dee03NmzfXggULftF5Xkm3bt20d+9evfvuu2rRooVmzJihtm3basaMGaU+RlBQULnO6dI3xCuUn59fro9TEj8/v2K3m4suGgYqOqIF8CG9e/fW3r17tWrVqjJ9/Zw5c3TLLbfob3/7m+6//3717NlTCQkJysjIKDI2JCREffv2VUpKig4ePKikpCSNHz9eOTk57jHR0dF68sknNXfuXO3bt0/VqlXT+PHjL/v4kZGRCgoKKvblnZ07d5bqHKpWrapHH31UH374oQ4dOqRWrVp53HVzuYgoi4KCgiLPHu3atUvShTubpP8+o3HpGhb3skxp5xYZGang4OBi1+SHH35QpUqVFBsbW6pjAb8mRAvgQ5599lmFhIToscce07Fjx4rs37t3r954443Lfr2fn1+Rf3nPnj1bP/74o8e2kydPenweEBCgZs2ayRij8+fPKz8/3+PlJEmqUaOGYmJilJube8XHT0xM1Ny5c3Xw4EH39h07dmjRokWX/brLzSs0NFQNGzb0eMyQkBBJRSOirKZMmeL+szFGU6ZMUeXKldWjRw9JF96Yzs/PT99++63H17311ltFjlXaufn5+alnz576/PPPPV6GOnbsmGbOnKn4+Hj3y4UA/otbngEf0qBBA82cOVN9+/ZV06ZNPd4R97vvvtPs2bOv+Lt6evfurXHjxunRRx9V586dtXXrVn3wwQdFrtvo2bOnatasqS5duigqKko7duzQlClTlJSUpCpVqigjI0O1atXS7373O7Vu3VqhoaH6+uuvtW7dOv35z3++4jmMHTtWCxcuVNeuXfXkk08qLy/P/Z4wJV2f0qxZM918881q166dqlatqvXr17tvuy7Url07SdLTTz+txMRE+fn56f777y9hZYsXGBiohQsXql+/furYsaMWLFigefPm6YUXXnBfzBsWFqZ7771XkydPlsPhUIMGDfTll1/q+PHjRY53NXN7+eWXtXjxYsXHx+vJJ5+Uv7+/pk+frtzcXE2cOLFM5wNUeN69eQlAcXbt2mUef/xxU7duXRMQEGCqVKliunTpYiZPnmxycnLc44q75XnEiBEmOjraBAUFmS5duphVq1aZ7t27m+7du7vHTZ8+3XTr1s1Uq1bNOJ1O06BBAzNy5EiTmZlpjDEmNzfXjBw50rRu3dpUqVLFhISEmNatW5u33nqrVPNfvny5adeunQkICDD169c3f/3rX01ycnKJtzy//PLLpkOHDiY8PNwEBQWZJk2amPHjx5tz5865x+Tl5ZmnnnrKREZGGofD4T5m4S3Ir732WpH5XO6W55CQELN3717Ts2dPExwcbKKiokxycnKR28ZPnDhh7rnnHhMcHGwiIiLMoEGDTFpaWpFjXm5uxhS95dkYYzZu3GgSExNNaGioCQ4ONrfccov57rvvPMYU3vK8bt06j+2XuxUbqMgcxnAVFwAA8H1c0wIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAK1SYN5crKCjQ4cOHVaVKlXJ9m28AAHDtGGN05swZxcTEuH9L/eVUmGg5fPgwv6sDAABLHTp0SLVq1brimAoTLVWqVJF04aT5nR0AANghKytLsbGx7r/Hr6TCREvhS0Iul4toAQDAMqW5tIMLcQEAgBWIFgAAYAWiBQAAWIFoAQAAViBaAACAFYgWAABgBaIFAABYgWgBAABWIFoAAIAViBYAAGAFogUAAFiBaAEAAFYgWgAAgBWIFgAAYAV/b0+gvLVIXqRKzmBvTwMAgApl/6tJ3p4Cz7QAAAA7EC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAK3g1Wvr37y+Hw6HBgwcX2TdkyBA5HA7179//+k8MAAD4HK8/0xIbG6tZs2YpOzvbvS0nJ0czZ85U7dq1vTgzAADgS7weLW3btlVsbKw+/fRT97ZPP/1UtWvXVps2bbw4MwAA4Eu8Hi2SNGDAAKWkpLg/f/fdd/Xoo496cUYAAMDX+ES0PPzww1qxYoUOHDigAwcOaOXKlXr44Yev+DW5ubnKysry+AAAABWXv7cnIEmRkZFKSkpSamqqjDFKSkpS9erVr/g1EyZM0NixY6/TDAEAgLf5xDMt0oWXiFJTU/Xee+9pwIABJY4fNWqUMjMz3R+HDh26DrMEAADe4hPPtEhSr169dO7cOTkcDiUmJpY43ul0yul0XoeZAQAAX+Az0eLn56cdO3a4/wwAAHAxn4kWSXK5XN6eAgAA8FFejZbU1NQr7p87d+51mQcAAPB9PnMhLgAAwJUQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACs4O/tCZS3tLGJcrlc3p4GAAAoZzzTAgAArEC0AAAAK5QpWhYuXKgVK1a4P586dapuvPFGPfjggzp9+nS5TQ4AAKBQmaJl5MiRysrKkiRt3bpVI0aM0O233659+/Zp+PDh5TpBAAAAqYwX4u7bt0/NmjWTJH3yySfq3bu3XnnlFW3cuFG33357uU4QAABAKuMzLQEBAfr5558lSV9//bV69uwpSapatar7GRgAAIDyVKZnWuLj4zV8+HB16dJFa9eu1UcffSRJ2rVrl2rVqlWuEwQAAJDK+EzLlClT5O/vrzlz5mjatGm64YYbJEkLFixQr169ynWCAAAAkuQwxhhvT6I8ZGVlKSwsTJmZmby5HAAAlriav7/L9EzLxo0btXXrVvfnn3/+ufr06aMXXnhB586dK8shAQAArqhM0TJo0CDt2rVLkpSenq77779fwcHBmj17tp599tlynSAAAIBUxmjZtWuXbrzxRknS7Nmz1a1bN82cOVOpqan65JNPynN+AAAAksoYLcYYFRQUSLpwy3Phe7PExsbq3//+d/nNDgAA4D/KFC3t27fXyy+/rL///e9avny5kpKSJF1407moqKhynSAAAIBUxmiZNGmSNm7cqKFDh+rFF19Uw4YNJUlz5sxR586dy3WCAAAAUjnf8pyTkyM/Pz9Vrly5vA5ZatzyDACAfa7m7+8yvSPu5QQGBpbn4QAAANzKFC35+fn6y1/+oo8//lgHDx4s8t4sp06dKpfJAQAAFCrTNS1jx47V66+/rr59+yozM1PDhw/Xb3/7W1WqVEljxowp5ykCAACUMVo++OADvfPOOxoxYoT8/f31wAMPaMaMGRo9erRWr15d3nMEAAAoW7QcPXpULVu2lCSFhoYqMzNTktS7d2/Nmzev/GYHAADwH2WKllq1aunIkSOSpAYNGuirr76SJK1bt05Op7P8ZgcAAPAfZYqWu+++W998840k6amnntJLL72kuLg4PfLIIxowYEC5ThAAAEAqp/dpWbVqlVatWqW4uDjdcccd5TGvq8b7tAAAYJ/r/j4tnTp1UqdOncrjUAAAAMUqdbR88cUXpT7onXfeWabJAAAAXE6po6VPnz6lGudwOJSfn1/W+QAAABSr1NFSUFBwLecBAABwRVd199CSJUvUrFkzZWVlFdmXmZmp5s2b65///Ge5TQ4AAKDQVUXLpEmT9Pjjjxd7dW9YWJgGDRqk119/vdwmBwAAUOiqouX7779Xr169Lru/Z8+e2rBhwy+eFAAAwKWuKlqOHTumypUrX3a/v7+/Tpw48YsnBQAAcKmripYbbrhBaWlpl92/ZcsWRUdH/+JJAQAAXOqqouX222/XSy+9pJycnCL7srOzlZycrN69e5fb5AAAAApd1dv4Hzt2TG3btpWfn5+GDh2qxo0bS5J++OEHTZ06Vfn5+dq4caOioqKu2YQvh7fxBwDAPtfsbfyjoqL03Xff6YknntCoUaNU2DsOh0OJiYmaOnWqV4IFAABUfFf9u4fq1Kmj+fPn6/Tp09qzZ4+MMYqLi1NERMS1mB8AAICkX/ALEyMiInTTTTeV51zKRYvkRarkDPb2NAAAqFD2v5rk7Slc3YW4AAAA3kK0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKzgE9HSv39/9enTp8j2ZcuWyeFwKCMj47rPCQAA+BafiBYAAICSEC0AAMAK/t6eQFnl5uYqNzfX/XlWVpYXZwMAAK41n4mWL7/8UqGhoR7b8vPzLzt+woQJGjt27LWeFgAA8BE+8/LQLbfcos2bN3t8zJgx47LjR40apczMTPfHoUOHruNsAQDA9eYzz7SEhISoYcOGHtv+9a9/XXa80+mU0+m81tMCAAA+wmeeaQEAALgSogUAAFiBaAEAAFbwiWtaUlNTi91+8803yxhzfScDAAB8Es+0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKzg7+0JlLe0sYlyuVzengYAAChnPNMCAACsQLQAAAArEC0AAMAKRAsAALAC0QIAAKxAtAAAACsQLQAAwApECwAAsALRAgAArEC0AAAAKxAtAADACkQLAACwAtECAACsQLQAAAArEC0AAMAK/t6eQHkxxkiSsrKyvDwTAABQWoV/bxf+PX4lFSZaTp48KUmKjY318kwAAMDVOnPmjMLCwq44psJES9WqVSVJBw8eLPGkf62ysrIUGxurQ4cOyeVyeXs6Pot1KhlrVDLWqGSsUcl+DWtkjNGZM2cUExNT4tgKEy2VKl24PCcsLKzC/octLy6XizUqBdapZKxRyVijkrFGJavoa1TaJxu4EBcAAFiBaAEAAFaoMNHidDqVnJwsp9Pp7an4LNaodFinkrFGJWONSsYalYw18uQwpbnHCAAAwMsqzDMtAACgYiNaAACAFYgWAABgBaIFAABYocJEy9SpU1W3bl0FBgaqY8eOWrt2rbenVC6+/fZb3XHHHYqJiZHD4dDcuXM99htjNHr0aEVHRysoKEgJCQnavXu3x5hTp07poYceksvlUnh4uP7whz/o7NmzHmO2bNmirl27KjAwULGxsZo4cWKRucyePVtNmjRRYGCgWrZsqfnz55f7+ZbFhAkTdNNNN6lKlSqqUaOG+vTpo507d3qMycnJ0ZAhQ1StWjWFhobqnnvu0bFjxzzGHDx4UElJSQoODlaNGjU0cuRI5eXleYxZtmyZ2rZtK6fTqYYNGyo1NbXIfHzxe3HatGlq1aqV+w2qOnXqpAULFrj3/9rXpzivvvqqHA6HnnnmGfe2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\n"},"metadata":{}}]},{"cell_type":"code","source":["def sent_len(df, ):\n","    symbols = []\n","    tokens = []\n","    for i, text in enumerate(tqdm(df.Text)):\n","        symbols.append(len(text))\n","        tokens.append(len(text.split()))\n","    df['len in symbols'] = symbols\n","    df['len in tokens'] = tokens\n","    print('\\n\\n')\n","    if 'Class' in df.columns:\n","        for cl in pd.unique(df.Class):\n","            print('\\n')\n","            print(f'{cl}: средняя длина в символах:', df[df.Class==cl]['len in symbols'].mean())\n","            print(f'{cl}: средняя длина в токенах:', df[df.Class==cl]['len in tokens'].mean())\n","    else:\n","        print('Средняя длина в символах:', df['len in symbols'].mean())\n","        print('Средняя длина в токенах:', df['len in tokens'].mean())"],"metadata":{"id":"WnjHnEGFaVOT","executionInfo":{"status":"ok","timestamp":1681370488410,"user_tz":-180,"elapsed":6,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["train_df = sent_len(data)\n","train_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":309,"referenced_widgets":["ccaa0176d6df4852b910f854da5f8d52","bfad44baf80e469598f1a5bcaec9d7d6","b8c84490703648ea9f904aa051c0a03b","fe32000dc9ca4a84807166cb7e968c8a","d6d27f0478e4402a9b3ac68288a7710d","826c2ec9122e458f92f67861410c6347","01a4382ea8784e6ca4592684cc9732d7","2821729d06c5446f88088d97ec01a009","a7742b0c343343a28043507893dac9b7","e0077574cdaf440d8bafc0a55ef9d5b3","d532da0b74d0440f8fef977c847e8298"]},"id":"wd0olbPqZf7b","executionInfo":{"status":"ok","timestamp":1681352455266,"user_tz":-180,"elapsed":749,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"90297229-cd8e-4124-dfc0-b1e7b2b43fdb"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-26-6b16fe86ba0a>:4: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  for i, text in enumerate(tqdm(df.Text)):\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/129066 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ccaa0176d6df4852b910f854da5f8d52"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n","\n","Train\n","\n","\n","1: средняя длина в символах: 221.472022933292\n","1: средняя длина в токенах: 30.069497172077167\n","\n","\n","0: средняя длина в символах: 236.86135345802793\n","0: средняя длина в токенах: 31.847034758488167\n"]}]},{"cell_type":"markdown","source":["# 1. GRU"],"metadata":{"id":"FnZZegL7P524"}},{"cell_type":"code","source":["strategy = tf.distribute.get_strategy()"],"metadata":{"id":"9f6VWZPPB7_N","executionInfo":{"status":"ok","timestamp":1681370516986,"user_tz":-180,"elapsed":249,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["from navec import Navec\n","\n","path = '/content/navec_hudlit_v1_12B_500K_300d_100q.tar'\n","navec = Navec.load(path)"],"metadata":{"id":"W8AWLzHbHDvN","executionInfo":{"status":"ok","timestamp":1681370518976,"user_tz":-180,"elapsed":283,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["token = text.Tokenizer(num_words=None)\n","\n","max_len = 30\n","\n","token.fit_on_texts(list(x_train) + list(x_test))\n","xtrain_seq = token.texts_to_sequences(x_train)\n","xvalid_seq = token.texts_to_sequences(x_test)\n","\n","xtrain_pad = pad_sequences(xtrain_seq, maxlen=max_len)\n","xtest_pad = pad_sequences(xvalid_seq, maxlen=max_len)\n","\n","word_index = token.word_index"],"metadata":{"id":"9hN5NkPJDdd3","executionInfo":{"status":"ok","timestamp":1681370551008,"user_tz":-180,"elapsed":30260,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["embedding_matrix = np.zeros((len(word_index) + 1, 300))\n","for word, i in tqdm(word_index.items()):\n","  try:\n","    embedding_vector = navec[word]\n","    embedding_matrix[i] = embedding_vector\n","  except:\n","    pass"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":101,"referenced_widgets":["fda1f61ab564475ba4b2fcdcf2591a7f","020cdaf1cb404a448318494ee6289503","7f6c69efc39646aaa4e067ce651f0c92","d68d3520cfe84ed884fb81b6a3872a2f","939835e4bfc54510914729f611827392","b522fbbf477145cba23eba46cb22be62","cfbb48f428fa48308e813d7781454a3e","0345b263e08f47beb2e10835ad392a32","08a405ed7f4849db9bef104ad0b0db65","c6ce74b0a5b64cc2bee0cc9e04c78915","48b4e5bcff2340b588fdc2138a6ff0e5"]},"id":"kVC5Z_qcDzHM","executionInfo":{"status":"ok","timestamp":1681370553452,"user_tz":-180,"elapsed":2453,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"4d62a00d-efca-4da9-d13c-78c41fa3f5be"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-32-3b0698b7915b>:2: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  for word, i in tqdm(word_index.items()):\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/356383 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fda1f61ab564475ba4b2fcdcf2591a7f"}},"metadata":{}}]},{"cell_type":"code","source":["%%time\n","with strategy.scope():\n","     model = Sequential()\n","     model.add(Embedding(len(word_index) + 1,\n","                     300,\n","                     weights=[embedding_matrix],\n","                     input_length=max_len,\n","                     trainable=False))\n","     model.add(SpatialDropout1D(0.3))\n","     model.add(GRU(300))\n","     model.add(Dense(1, activation='sigmoid'))\n","\n","     model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])   \n","    \n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zGVgNyDWBqB_","executionInfo":{"status":"ok","timestamp":1681362083659,"user_tz":-180,"elapsed":1881,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"5fb07606-9f57-477f-a17a-b777ec99c2a0"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 30, 300)           106915200 \n","                                                                 \n"," spatial_dropout1d (SpatialD  (None, 30, 300)          0         \n"," ropout1D)                                                       \n","                                                                 \n"," gru (GRU)                   (None, 300)               541800    \n","                                                                 \n"," dense (Dense)               (None, 1)                 301       \n","                                                                 \n","=================================================================\n","Total params: 107,457,301\n","Trainable params: 542,101\n","Non-trainable params: 106,915,200\n","_________________________________________________________________\n","CPU times: user 1.4 s, sys: 690 ms, total: 2.09 s\n","Wall time: 1.5 s\n"]}]},{"cell_type":"code","source":["model.fit(xtrain_pad, y_train, epochs=5, batch_size=256)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ryzJeaFCSqxK","executionInfo":{"status":"ok","timestamp":1681362897479,"user_tz":-180,"elapsed":813843,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"a09ce155-f5bf-4c7b-9356-13d75bebedbd"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","505/505 [==============================] - 165s 322ms/step - loss: 0.6470 - accuracy: 0.6057\n","Epoch 2/5\n","505/505 [==============================] - 160s 317ms/step - loss: 0.6015 - accuracy: 0.6548\n","Epoch 3/5\n","505/505 [==============================] - 163s 323ms/step - loss: 0.5802 - accuracy: 0.6721\n","Epoch 4/5\n","505/505 [==============================] - 163s 323ms/step - loss: 0.5628 - accuracy: 0.6883\n","Epoch 5/5\n","505/505 [==============================] - 164s 324ms/step - loss: 0.5447 - accuracy: 0.7032\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0ba8070bb0>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["predicted = model.predict(xtest_pad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6xNs2WhKbxvX","executionInfo":{"status":"ok","timestamp":1681362915082,"user_tz":-180,"elapsed":17662,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"48b20c3e-efb3-460b-8250-1eade44b8697"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["673/673 [==============================] - 17s 25ms/step\n"]}]},{"cell_type":"code","source":["print('Accuracy:', accuracy_score(y_test, np.round_(predicted)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iUZ7bZNycGMI","executionInfo":{"status":"ok","timestamp":1681305924062,"user_tz":-180,"elapsed":90,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"eb0d03fc-68b0-40c3-dcb0-ff0a21697f90"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7076379526753754\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","def confusion(expected, predicted, text):\n","    matrix = confusion_matrix(expected, predicted, normalize='true')\n","    labels = sorted(np.unique(expected))\n","    plt.figure(figsize = (6,6))\n","    sns.heatmap(matrix, annot=True, \n","                xticklabels=labels,\n","                yticklabels=labels)\n","    plt.ylabel('True value')\n","    plt.xlabel('Predicted value')\n","    plt.title(f'Confusion matrix for {text}')\n","    plt.show()"],"metadata":{"id":"-zItC5i3bvAE","executionInfo":{"status":"ok","timestamp":1681372074318,"user_tz":-180,"elapsed":21,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["confusion(y_test,  np.round_(predicted), 'GRU')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"VamRrDofh5_F","executionInfo":{"status":"ok","timestamp":1681363429353,"user_tz":-180,"elapsed":19,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"a2d8cf69-0936-46cc-d1e4-012a106bb60d"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAgEAAAIjCAYAAACagshcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABGrUlEQVR4nO3de3zP9f//8ft7s723OWyYGfLZQuQUIZqzTHKmFJWMog9JsnRY9XEq1rdSOoucUko6qPAhLXSgFFFOy1n1sbGcMmyz9/P3h593vW3T3uztjeft+r28LpfPnu/n6/l6vGbf9tjj+Xw9Xw5jjBEAALBOgL8DAAAA/kESAACApUgCAACwFEkAAACWIgkAAMBSJAEAAFiKJAAAAEuRBAAAYCmSAAAALEUSgAvWli1bdP311ys8PFwOh0Pz5s0r0vF37twph8OhGTNmFOm4l4LY2Fj169evyMZLT09Xz549VbZsWTkcDk2cOLHIxgZw9kgCcEbbtm3Tv//9b1WpUkUhISEqVaqUmjVrphdeeEHHjh3z6bUTEhL0888/a9y4cZo1a5YaNWrk0+tdijZu3KjRo0dr586dfo1j+PDhWrx4sZKSkjRr1izdcMMNPr9mVlaWXnrpJTVv3lylS5dWcHCwKlasqK5du+qdd95Rbm6uu++phPDUERAQoDJlyqhDhw5auXJlnrH79eunEiVKFHjtEiVKFGkSBfhKMX8HgAvXggULdPPNN8vpdKpv376qU6eOsrOz9fXXX+vBBx/Uhg0bNHnyZJ9c+9ixY1q5cqUee+wx3XvvvT65RkxMjI4dO6agoCCfjH8h2Lhxo8aMGaPWrVsrNja20OelpqYqIKDo/kb44osv1K1bN40YMaLIxjyTffv2qUOHDlq9erXat2+vxx9/XGXKlFFaWpo+//xz3Xbbbdq6dav+85//eJx36623qmPHjsrNzdUvv/yiV199VW3atNH333+vunXrnpfYgfOJJAD52rFjh3r37q2YmBh98cUXqlChgvuzIUOGaOvWrVqwYIHPrr9v3z5JUkREhM+u4XA4FBIS4rPxLzbGGB0/flyhoaFyOp1FOvbevXuL9N/y+PHjCg4OLjBRueOOO/Tjjz/qgw8+0I033ujxWVJSkn744QelpqbmOa9Bgwbq06eP++sWLVqoQ4cOeu211/Tqq68WWfzABcMA+Rg0aJCRZL755ptC9c/JyTFjx441VapUMcHBwSYmJsYkJSWZ48ePe/SLiYkxnTp1Ml999ZW55pprjNPpNJdffrmZOXOmu8+oUaOMJI8jJibGGGNMQkKC+3//3alz/u6zzz4zzZo1M+Hh4aZ48eKmevXqJikpyf35jh07jCQzffp0j/NSUlJM8+bNTVhYmAkPDzddu3Y1GzduzPd6W7ZsMQkJCSY8PNyUKlXK9OvXz2RmZv7j96tVq1amdu3aZt26daZly5YmNDTUVK1a1cydO9cYY8yyZctM48aNTUhIiKlevbpZsmSJx/k7d+40gwcPNtWrVzchISGmTJkypmfPnmbHjh3uPtOnT8/zfZRkli5d6vFvsWjRItOwYUPjdDrN888/7/4sISHBGGOMy+UyrVu3NpGRkSY9Pd09flZWlqlTp46pUqWKOXLkSL73WVAMp2zbts307NnTlC5d2oSGhpomTZqY+fPne4yxdOlSI8m888475rHHHjMVK1Y0DofDHDhwIN9rrlixwkgygwYN+qd/BrdTPwvPPPOMR/uRI0eMJHP99dd7tCckJJjixYsXOF7x4sXd3z/gQsaaAOTr008/VZUqVdS0adNC9R8wYIBGjhypBg0a6Pnnn1erVq2UnJys3r175+m7detW9ezZU+3atdOECRNUunRp9evXTxs2bJAk3XjjjXr++eclnSzPzpo1y+uFZBs2bFDnzp2VlZWlsWPHasKECeratau++eabM573+eefq3379tq7d69Gjx6txMRErVixQs2aNct3Xv2WW27Rn3/+qeTkZN1yyy2aMWOGxowZU6gYDxw4oM6dO6tJkyZ6+umn5XQ61bt3b82ZM0e9e/dWx44d9dRTTykzM1M9e/bUn3/+6T73+++/14oVK9S7d2+9+OKLGjRokFJSUtS6dWsdPXpUktSyZUvdd999kqRHH31Us2bN0qxZs1SzZk33OKmpqbr11lvVrl07vfDCC6pfv36eOB0Oh6ZNm6bjx49r0KBB7vZRo0Zpw4YNmj59uooXL57vPbZs2VKzZs2SJLVr184dg3RysWDTpk21ePFi3XPPPRo3bpyOHz+url276qOPPsoz1hNPPKEFCxZoxIgRGj9+vIKDg/O95qeffipJHn/Rn61T/+alS5c+57GAC5K/sxBceA4dOmQkmW7duhWq/9q1a40kM2DAAI/2ESNGGEnmiy++cLfFxMQYSebLL790t+3du9c4nU7zwAMPuNsK+sussJWA559/3kgy+/btKzDu/CoB9evXN1FRUeaPP/5wt61bt84EBASYvn375rnenXfe6TFmjx49TNmyZQu85imtWrUykszs2bPdbZs3bzaSTEBAgPn222/d7YsXL84T59GjR/OMuXLlSiPJvPnmm+62uXPnevz1/3en/i0WLVqU72en/yX7+uuvG0nmrbfeMt9++60JDAw0999//z/eqzHGSDJDhgzxaLv//vuNJPPVV1+52/78809z+eWXm9jYWJObm2uM+asSUKVKlXzv+3Q9evQwkszBgwc92o8dO2b27dvnPv5eSTj1szBmzBizb98+k5aW5q5WSXJXaE6hEoBLBZUA5HH48GFJUsmSJQvVf+HChZKkxMREj/YHHnhAkvKsHahVq5ZatGjh/rpcuXKqUaOGtm/fftYxn+7U/PPHH38sl8tVqHP27NmjtWvXql+/fipTpoy7/aqrrlK7du3c9/l3f//LWDo5h/zHH3+4v4dnUqJECY9KSY0aNRQREaGaNWuqSZMm7vZT//vv35/Q0FD3/87JydEff/yhatWqKSIiQmvWrCnE3Z50+eWXq3379oXqe/fdd6t9+/YaOnSo7rjjDlWtWlXjx48v9LVOt3DhQjVu3FjNmzd3t5UoUUJ33323du7cqY0bN3r0T0hI8Ljvgpz63p++en/SpEkqV66c+/j7dU8ZNWqUypUrp+joaLVo0UKbNm3ShAkT1LNnz7O5ReCCRxKAPEqVKiVJHuXnM9m1a5cCAgJUrVo1j/bo6GhFRERo165dHu3/+te/8oxRunRpHThw4CwjzqtXr15q1qyZBgwYoPLly6t379567733zpgQnIqzRo0aeT6rWbOmMjIylJmZ6dF++r2cKhsX5l4uu+wyORwOj7bw8HBVrlw5T9vpYx47dkwjR45U5cqV5XQ6FRkZqXLlyungwYM6dOjQP177lMsvv7zQfSVp6tSpOnr0qLZs2aIZM2YU6pdyQXbt2lXg9/rU52cT66nk9ciRIx7tN910k5YsWaIlS5boqquuyvfcu+++W0uWLNGnn36q4cOH69ixYx6PEnrj9H9b4ELE0wHIo1SpUqpYsaLWr1/v1XmF/Y9eYGBgvu3GmLO+xun/oQ4NDdWXX36ppUuXasGCBVq0aJHmzJmj6667Tp999lmBMXjrXO6loHMLM+bQoUM1ffp03X///YqLi3NvqNS7d+9CVz4kef1LfNmyZcrKypIk/fzzz4qLi/Pq/HNR2FivvPJKSdL69evVrFkzd3vlypXdCVbp0qWVkZGR59wrrrhC8fHxkqTOnTsrMDBQjzzyiNq0aeOxT0VISIiysrJkjMnzM2n+/1MWPHmCiwGVAOSrc+fO2rZtW74bpZwuJiZGLpdLW7Zs8WhPT0/XwYMHFRMTU2RxlS5dWgcPHszTfvpfjZIUEBCgtm3b6rnnntPGjRs1btw4ffHFF1q6dGm+Y5+KM79HxzZv3qzIyMgCF8Cdb++//74SEhLcpep27dqpefPmeb43RfnX6J49ezR06FBdf/316ty5s0aMGJHv972wYmJiCvxen/r8bHTu3FmS9Pbbb591bKc89thjKlmypB5//HGP9piYGJ04cULbtm3Lc87WrVuVm5tbpD/3gK+QBCBfDz30kIoXL64BAwYoPT09z+fbtm3TCy+8IEnq2LGjJOVZwf/cc89Jkjp16lRkcVWtWlWHDh3STz/95G7bs2dPntXk+/fvz3PuqZXvp/6SPV2FChVUv359zZw50+OX6fr16/XZZ5+57/NCEBgYmKfa8NJLL+WpiJxKWvJLnLw1cOBAuVwuTZ06VZMnT1axYsV01113FarqkZ+OHTtq1apVHolmZmamJk+erNjYWNWqVeusxm3WrJnatWunyZMn6+OPP863T2FjjoiI0L///W8tXrxYa9eudbd36NBBkvTyyy/nOeeVV17x6ANcyJgOQL6qVq2q2bNnq1evXqpZs6bHjoErVqzQ3Llz3dui1qtXTwkJCZo8ebIOHjyoVq1aadWqVZo5c6a6d++uNm3aFFlcvXv31sMPP6wePXrovvvu09GjR/Xaa6+pevXqHgvixo4dqy+//FKdOnVSTEyM9u7dq1dffVWXXXZZvgvCTnnmmWfUoUMHxcXF6a677tKxY8f00ksvKTw8XKNHjy6y+zhXnTt31qxZsxQeHq5atWpp5cqV+vzzz1W2bFmPfvXr11dgYKD+7//+T4cOHZLT6dR1112nqKgor643ffp0LViwQDNmzNBll10m6WTS0adPH7322mu65557vL6HRx55RO+88446dOig++67T2XKlNHMmTO1Y8cOffDBB+e0Y+Fbb72lG264Qd27d1eHDh0UHx+v0qVLu3cM/PLLLwv9S3rYsGGaOHGinnrqKb377ruSTn5fBwwYoBdeeEFbtmxRu3btJElLlizRwoULNWDAANWrV++s4wfOG/89mICLwS+//GIGDhxoYmNjTXBwsClZsqRp1qyZeemllzw2AsrJyTFjxowxl19+uQkKCjKVK1c+42ZBp2vVqpVp1aqV++uCHhE05uQmQHXq1DHBwcGmRo0a5q233srziGBKSorp1q2bqVixogkODjYVK1Y0t956q/nll1/yXOP0zYI+//xz06xZMxMaGmpKlSplunTpUuBmQac/gnhqc5y/b9qTn1ObBZ2uoO+PTnvE7sCBA6Z///4mMjLSlChRwrRv395s3rw530f7pkyZYqpUqWICAwPz3SwoP38f59dffzXh4eGmS5cuefr16NHDFC9e3Gzfvv2M93t6/Kec2iwoIiLChISEmMaNGxe4WdDpj+n9k2PHjpmJEyeauLg4U6pUKVOsWDETHR1tOnfubN5++21z4sQJd98z/bwZY0y/fv1MYGCg2bp1q7stNzfXvPDCC6ZevXomJCTEhISEmHr16pkXX3zR/XgjcKFzGHOWtTwAAHBRY00AAACWIgkAAMBSJAEAAFiKJAAAAEuRBAAAYCmSAAAALEUSAACApS7JHQNzMorulbTAhSq0Yot/7gRc5E5k/+7T8X35+yIosorPxi4qVAIAALDUJVkJAACgUFy5/9znEkYSAACwl3H5OwK/YjoAAABLUQkAANjLRSUAAABYiEoAAMBahjUBAADARlQCAAD2Yk0AAACwEZUAAIC9LF8TQBIAALCX5TsGMh0AAIClqAQAAOxl+XQAlQAAACxFJQAAYC8eEQQAADaiEgAAsBbbBgMAACtRCQAA2MvyNQEkAQAAezEdAAAAbEQlAABgL7YNBgAANqISAACwF2sCAACAjagEAADsZfkjglQCAACwFJUAAIC9LF8TQBIAALAX0wEAAMBGJAEAAGsZk+uzw1uvvPKKYmNjFRISoiZNmmjVqlUF9m3durUcDkeeo1OnTl5dkyQAAAA/mzNnjhITEzVq1CitWbNG9erVU/v27bV37958+3/44Yfas2eP+1i/fr0CAwN18803e3VdkgAAgL2My3eHF5577jkNHDhQ/fv3V61atTRp0iSFhYVp2rRp+fYvU6aMoqOj3ceSJUsUFhZGEgAAwIUg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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#2. LSTM"],"metadata":{"id":"Xv_4TMUaBUwp"}},{"cell_type":"code","source":["embedding_layer = tf.keras.layers.Embedding(len(word_index) + 1,\n","                                          300,\n","                                          weights=[embedding_matrix],\n","                                          input_length=30,\n","                                          trainable=False)"],"metadata":{"id":"HfQvxB-eypBE","executionInfo":{"status":"ok","timestamp":1681370572986,"user_tz":-180,"elapsed":227,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["from keras.layers import Conv1D, Bidirectional, LSTM, Dense, Input, Dropout\n","from keras.layers import SpatialDropout1D\n","from keras.callbacks import ModelCheckpoint\n","\n","sequence_input = Input(shape=(30,), dtype='int32')\n","embedding_sequences = embedding_layer(sequence_input)\n","x = SpatialDropout1D(0.2)(embedding_sequences)\n","x = Conv1D(64, 5, activation='relu')(x)\n","x = Bidirectional(LSTM(64, dropout=0.2, recurrent_dropout=0.2))(x)\n","x = Dense(512, activation='relu')(x)\n","x = Dropout(0.5)(x)\n","x = Dense(512, activation='relu')(x)\n","outputs = Dense(1, activation='sigmoid')(x)\n","model = tf.keras.Model(sequence_input, outputs)"],"metadata":{"id":"AsCxBvghzFoC","executionInfo":{"status":"ok","timestamp":1681370583504,"user_tz":-180,"elapsed":4629,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["from keras.optimizers import Adam\n","from keras.callbacks import ReduceLROnPlateau\n","\n","model.compile(optimizer=Adam(learning_rate=1e-3), loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","ReduceLROnPlateau = ReduceLROnPlateau(factor=0.1,\n","                                     min_lr = 0.01,\n","                                     monitor = 'val_loss',\n","                                     verbose = 1)"],"metadata":{"id":"8amZ8D6AzgoL","executionInfo":{"status":"ok","timestamp":1681370595035,"user_tz":-180,"elapsed":3,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["history = model.fit(xtrain_pad, y_train, batch_size=256, epochs=3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yl6FWprezyMy","executionInfo":{"status":"ok","timestamp":1681372074316,"user_tz":-180,"elapsed":1462884,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"cee5dda2-a006-4682-a940-870c038fccc6"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/tensorflow/python/data/ops/structured_function.py:254: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","505/505 [==============================] - 472s 933ms/step - loss: 0.6415 - accuracy: 0.6136\n","Epoch 2/3\n","505/505 [==============================] - 479s 948ms/step - loss: 0.6076 - accuracy: 0.6497\n","Epoch 3/3\n","505/505 [==============================] - 457s 905ms/step - loss: 0.5881 - accuracy: 0.6665\n"]}]},{"cell_type":"code","source":["predicted = model.predict(xtest_pad)\n","confusion(y_test,  np.round_(predicted), 'LSTM')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":636},"id":"OmLQge_gf5uk","executionInfo":{"status":"ok","timestamp":1681372412563,"user_tz":-180,"elapsed":186324,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"bd9964b2-b8e0-4453-b856-d7add5e8f4e5"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/tensorflow/python/data/ops/structured_function.py:254: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["673/673 [==============================] - 185s 276ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# CNN"],"metadata":{"id":"inhBc_RK99-C"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","\n","class CNN_Text(nn.Module):\n","    \n","    def __init__(self):\n","        super(CNN_Text, self).__init__()\n","        filter_sizes = [1,2,3,5]\n","        num_filters = 36\n","        n_classes = len(le.classes_)\n","        self.embedding = nn.Embedding(max_features, embed_size)\n","        self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32))\n","        self.embedding.weight.requires_grad = False\n","        self.convs1 = nn.ModuleList([nn.Conv2d(1, num_filters, (K, embed_size)) for K in filter_sizes])\n","        self.dropout = nn.Dropout(0.2)\n","        self.fc1 = nn.Linear(len(filter_sizes)*num_filters, n_classes)\n","\n","\n","    def forward(self, x):\n","        x = self.embedding(x)  \n","        x = x.unsqueeze(1)  \n","        x = [F.relu(conv(x)).squeeze(3) for conv in self.convs1] \n","        x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]  \n","        x = torch.cat(x, 1)\n","        x = self.dropout(x)  \n","        logit = self.fc1(x) \n","        return logit"],"metadata":{"id":"syowXsBq-FgO","executionInfo":{"status":"ok","timestamp":1681343512821,"user_tz":-180,"elapsed":1037,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["from sklearn import preprocessing\n","le = preprocessing.LabelEncoder()\n","\n","y_train = le.fit_transform(y_train)\n","y_test = le.transform(y_test)\n","le.classes_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"60o2KoY7zXYy","executionInfo":{"status":"ok","timestamp":1681342275769,"user_tz":-180,"elapsed":14,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"652d4fad-1978-4d1c-85b6-a3bc489f4f12"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1.], dtype=float32)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["embed_size = 300 \n","max_features = 120000 \n","maxlen = 200 \n","batch_size = 128\n","n_epochs = 10 \n","n_splits = 5 \n","SEED = 10\n","debug = 0"],"metadata":{"id":"cNXnkIHmz8B6","executionInfo":{"status":"ok","timestamp":1681343627613,"user_tz":-180,"elapsed":8,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["import time\n","import torch.nn.functional as F\n","\n","model = CNN_Text()\n","loss_fn = nn.CrossEntropyLoss(reduction='sum')\n","optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=0.001)\n","model.cuda()\n","\n","x_train = torch.tensor(xtrain_pad, dtype=torch.long).cuda()\n","y_train = torch.tensor(y_train, dtype=torch.long).cuda()\n","x_cv = torch.tensor(xtest_pad, dtype=torch.long).cuda()\n","y_cv = torch.tensor(y_test, dtype=torch.long).cuda()\n","\n","train = torch.utils.data.TensorDataset(x_train, y_train)\n","valid = torch.utils.data.TensorDataset(x_cv, y_cv)\n","\n","\n","train_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True)\n","valid_loader = torch.utils.data.DataLoader(valid, batch_size=batch_size, shuffle=False)\n","\n","train_loss = []\n","valid_loss = []\n","\n","for epoch in range(n_epochs):\n","    start_time = time.time()\n","    \n","    model.train()\n","    avg_loss = 0.  \n","    for i, (x_batch, y_batch) in enumerate(train_loader):\n","        \n","        y_pred = model(x_batch)\n","        \n","        loss = loss_fn(y_pred, y_batch)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        avg_loss += loss.item() / len(train_loader)\n","    \n","    \n","    model.eval()        \n","    avg_val_loss = 0.\n","    val_preds = np.zeros((len(x_cv),len(le.classes_)))\n","    \n","    for i, (x_batch, y_batch) in enumerate(valid_loader):\n","        y_pred = model(x_batch).detach()\n","        avg_val_loss += loss_fn(y_pred, y_batch).item() / len(valid_loader)\n","        \n","        val_preds[i * batch_size:(i+1) * batch_size] =F.softmax(y_pred).cpu().numpy()\n","    \n","    \n","    val_accuracy = sum(val_preds.argmax(axis=1)==y_test)/len(y_test)\n","    train_loss.append(avg_loss)\n","    valid_loss.append(avg_val_loss)\n","    elapsed_time = time.time() - start_time \n","    print('Epoch {}/{} \\t loss={:.4f} \\t val_loss={:.4f}  \\t val_acc={:.4f}  \\t time={:.2f}s'.format(\n","                epoch + 1, n_epochs, avg_loss, avg_val_loss, val_accuracy, elapsed_time))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xg_F8t17vsZL","executionInfo":{"status":"ok","timestamp":1681343752140,"user_tz":-180,"elapsed":21116,"user":{"displayName":"Alexandra Sedlovskaya","userId":"17496018377434180912"}},"outputId":"d0ab660d-767a-4e88-93f8-d86335295f2b"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-42-c51aae54f7e7>:10: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  y_train = torch.tensor(y_train, dtype=torch.long).cuda()\n","<ipython-input-42-c51aae54f7e7>:48: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  val_preds[i * batch_size:(i+1) * batch_size] =F.softmax(y_pred).cpu().numpy()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/5 \t loss=81.3243 \t val_loss=78.9036  \t val_acc=0.6456  \t time=3.91s\n","Epoch 2/5 \t loss=76.6251 \t val_loss=77.1904  \t val_acc=0.6595  \t time=4.39s\n","Epoch 3/5 \t loss=73.1990 \t val_loss=77.3138  \t val_acc=0.6601  \t time=3.83s\n","Epoch 4/5 \t loss=69.9378 \t val_loss=78.4268  \t val_acc=0.6524  \t time=3.85s\n","Epoch 5/5 \t loss=67.2037 \t val_loss=78.6177  \t val_acc=0.6543  \t time=4.30s\n"]}]}]}